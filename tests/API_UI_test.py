"""
–í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞:
1. pytest tests/API_UI_test.py --browser chromium --headed               - –ø—Ä–æ–≥–æ–Ω –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
2. pytest tests/API_UI_test.py -m "api"                                  - —Ç–æ–ª—å–∫–æ API —Ç–µ—Å—Ç—ã
3. pytest tests/API_UI_test.py -m "ui" --browser chromium --headed       - UI —Ç–µ—Å—Ç—ã –≤ chromium
   pytest tests/API_UI_test.py -m "ui" --browser webkit --headed         - UI —Ç–µ—Å—Ç—ã –≤ webkit
   pytest tests/API_UI_test.py -m "ui" --browser firefox --headed        - UI —Ç–µ—Å—Ç—ã –≤ firefox
–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞:
pytest --alluredir=results tests/API_UI_test.py --headed
allure serve results
"""

import re
import pytest
import conftest
import requests
from playwright.sync_api import Playwright, sync_playwright, expect


@pytest.mark.api
# FORMS-01:	–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ —Å—á–µ—Ç–∞
def test_correct_value():
    """
    –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–∑-–∑–∞ –±–∞–≥–∞ (—Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–∏–Ω—ã):
    –í –Ω–∞–ª–∏—á–∏–∏ 122000 —Ç–æ–∫–µ–Ω–æ–≤ (1220 –∫–æ–∏–Ω–æ–≤), –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∏–º –∫–æ–∏–Ω—ã = 1220
    –ó–Ω–∞—á–∏—Ç –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ * 100, —Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:
    "–¢–æ–∫–µ–Ω—ã —Å–ø–∏—Å–∞–Ω—ã, –≤—Å–µ–≥–æ —Å–ø–∏—Å–∞–Ω–æ 122000, –æ—Å—Ç–∞–ª–æ—Å—å 0", –Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç:
    "–¢–æ–∫–µ–Ω—ã —Å–ø–∏—Å–∞–Ω—ã, –≤—Å–µ–≥–æ —Å–ø–∏—Å–∞–Ω–æ 1220, –æ—Å—Ç–∞–ª–æ—Å—å 120780"
    """
    payload = {
        'actionForm': 'sendToken',
        'secret': '2d$JHjqml=',
        'value': 1220
    }
    r = requests.post(conftest.baseUrl, headers=conftest.headers, data=payload)
    s = [int(s) for s in re.findall(r'-?\d+\.?\d*', r.text)]
    # print(r.text)
    assert r.status_code == 200
    assert payload.get('value') * 100 == s[0]
    assert s[1] == 0


@pytest.mark.api
# FORMS-02:	–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤, –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å –Ω–∞ —Å—á–µ—Ç–µ
def test_biggest_value():
    """
    –ë–∞–≥: —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤ > —á–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
    –¢–æ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –≤ –æ—Ç–≤–µ—Ç–µ  - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
    """
    payload = {
        'actionForm': 'sendToken',
        'secret': '2d$JHjqml=',
        'value': 122001
    }
    r = requests.post(conftest.baseUrl, headers=conftest.headers, data=payload)
    s = [int(s) for s in re.findall(r'-?\d+\.?\d*', r.text)]
    assert r.status_code == 200
    assert s[1] >= 0


@pytest.mark.api
# FORMS-03:	–í—ã–≤–æ–¥ –¥—Ä–æ–±–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
def test_fractional_value():
    """
    –ò–º–µ–µ—Ç—Å—è –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –±–∞–≥: FORMS-01
    """
    payload = {
        'actionForm': 'sendToken',
        'secret': '2d$JHjqml=',
        'value': 1219.99
    }
    r = requests.post(conftest.baseUrl, headers=conftest.headers, data=payload)
    s = [float(s) for s in re.findall(r'-?\d+\.?\d*', r.text)]
    assert r.status_code == 200
    assert payload.get('value') * 100 == s[0]


@pytest.mark.ui
# FORMS-04: –í–≤–æ–¥ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤—ã–≤–æ–¥–∞ –∫–æ–∏–Ω–æ–≤
def test_empty_value(page):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ —Å–ª—É—á–∞–µ –∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    page.goto("https://groall.noda.pro/test_qa")
    page.get_by_title("Close").click()
    page.get_by_role("button", name="–í—ã–≤–µ—Å—Ç–∏").click()
    assert page.locator("#value-error").text_content() == "–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"


@pytest.mark.ui
# FORMS-05: –í–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞)
def test_valid_spec(page):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ —Å–ª—É—á–∞–µ –∫–æ–≥–¥–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ
    """
    page.goto("https://groall.noda.pro/test_qa")
    page.get_by_title("Close").click()
    page.locator("input[name=\"value\"]").fill("12+12")
    page.get_by_role("button", name="–í—ã–≤–µ—Å—Ç–∏").click()
    assert page.locator("#value-error").text_content() == "–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!"


@pytest.mark.ui
# FORMS-06: –í–≤–æ–¥ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
def test_valid_text(page):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ —Å–ª—É—á–∞–µ –∫–æ–≥–¥–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ
    """
    page.goto("https://groall.noda.pro/test_qa")
    page.get_by_title("Close").click()
    page.locator("input[name=\"value\"]").fill("qwerty")
    page.get_by_role("button", name="–í—ã–≤–µ—Å—Ç–∏").click()
    assert page.locator("#value-error").text_content() == "–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!"


@pytest.mark.ui
# FORMS-07: –í–≤–æ–¥ —ç–º–æ–¥–∂–∏
def test_valid_emoji(page):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ —Å–ª—É—á–∞–µ –∫–æ–≥–¥–∞ –≤–≤–µ–¥–µ–Ω–æ —ç–º–æ–¥–∂–∏
    """
    page.goto("https://groall.noda.pro/test_qa")
    page.get_by_title("Close").click()
    page.locator("input[name=\"value\"]").fill('üëΩ')
    page.get_by_role("button", name="–í—ã–≤–µ—Å—Ç–∏").click()
    assert page.locator("#value-error").text_content() == "–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!"


@pytest.mark.api
# FORMS-08: –í—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è "0"
def test_value_zero():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 0
    """
    payload = {
        'actionForm': 'sendToken',
        'secret': '2d$JHjqml=',
        'value': 0
    }
    r = requests.post(conftest.baseUrl, headers=conftest.headers, data=payload)
    s = [int(s) for s in re.findall(r'-?\d+\.?\d*', r.text)]
    assert r.status_code == 200
    assert r.text == '–í–≤–µ–¥–µ–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–æ–∏–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'


@pytest.mark.api
# FORMS-09: –í—ã–≤–æ–¥ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
def test_negative_value():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    payload = {
        'actionForm': 'sendToken',
        'secret': '2d$JHjqml=',
        'value': -10
    }
    r = requests.post(conftest.baseUrl, headers=conftest.headers, data=payload)
    s = [int(s) for s in re.findall(r'-?\d+\.?\d*', r.text)]
    assert r.status_code == 200
    assert r.text == '–í–≤–µ–¥–µ–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–æ–∏–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'


@pytest.mark.ui
# FORMS-10:	–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ–∫–±–æ–∫—Å–∞ "–í—ã–≤–µ—Å—Ç–∏ –≤—Å—ë" –¥–æ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è
def test_valid_check(page):
    page.goto("https://groall.noda.pro/test_qa")
    page.get_by_title("Close").click()
    page.locator("#all").check()
    page.get_by_role("button", name="–í—ã–≤–µ—Å—Ç–∏").click()
    expect(page.locator("#all")).to_be_checked()


@pytest.mark.ui
# FORMS-12: –í–≤–æ–¥ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏
def test_sql(page):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –≤–≤–µ–¥–µ–Ω–æ —ç–º–æ–¥–∂–∏
    """
    page.goto("https://groall.noda.pro/test_qa")
    page.get_by_title("Close").click()
    page.locator("input[name=\"value\"]").fill('SELECT * FROM users')
    page.get_by_role("button", name="–í—ã–≤–µ—Å—Ç–∏").click()
    assert page.locator("#value-error").text_content() == "–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!"


@pytest.mark.ui
# FORMS-13: –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ XSS-–∞—Ç–∞–∫–∞–º
def test_XSS(page):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –≤–≤–µ–¥–µ–Ω–æ —ç–º–æ–¥–∂–∏
    """
    page.goto("https://groall.noda.pro/test_qa")
    page.get_by_title("Close").click()
    page.locator("input[name=\"value\"]").fill('<script>alert(¬´I hacked this!¬ª)</script>')
    page.get_by_role("button", name="–í—ã–≤–µ—Å—Ç–∏").click()
    assert page.locator("#value-error").text_content() == "–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!"

